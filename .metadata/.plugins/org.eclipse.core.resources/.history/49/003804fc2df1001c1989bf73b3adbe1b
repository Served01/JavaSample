import java.util.Scanner;

public class HelloWorld5 { 
	
	void helloPrint() { // 번지: 2000 이라고 가정, 신림동
		System.out.println("안녕하세요?????");
		System.out.println("Helloworld~~~");
		
	}
		
	public static void main(String[] args) {  //번지: 3000 이라고 가정, 구로구
		
		HelloWorld5 helloworld3 = new HelloWorld5();
		//public final class Scanner
		//extends Object
		//implements Iterator<String>, Closeable
		Scanner sc = new Scanner(System.in);
		System.out.print("인사말을 입력해 주세요: ");
		String Hello = sc.next();
		
		System.out.println("인사말: " + Hello);
		
	
	} //main method 영역
	
}
// memory: RAM => 16GB

// 접근제한자
/* 개발자가 프로그래밍 할 때 접근제한자를 결정해야한다.
 * 생략: 
 * private: 같은 패키지의 같은 클래스내에 존재하는 경우에 된다. (범위가 제일 좁음), 정보은닉 (캡슐화)
 * protected: 상속관계에 있는 같은 패키지와 클래스의 경우에 사용가능함.
 * public: (대부분은 이거여야함)
 * 
 * Method 형식
 * 
 * public static void Hello() {
 * (public static void main의 static은 뺄 수 없지만 여기서는 static을 뺄 수 있음)
 * }
 */
// main method는 깨끗하게 하는 것이 가장 좋은 프로그래밍 방식이다.
// 공용 영역에다가 개인 메소드를 만들어 놓는 것이 활용성이 높아진다.